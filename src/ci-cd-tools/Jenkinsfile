pipeline {
    agent any 

    environment {
        TOOL_DIR = "${WORKSPACE}\\ci-cd-tools"
    }

    stages {
        stage('Build') { 
            steps {
				sh 'echo Comenzando Build'
				sh 'make -C src/ci-cd-tools/ clean'
				sh 'make -C src/ci-cd-tools/ -j8 all'
				script {
					if (manager.logContains('warning')) {
						catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
							sh 'exit 1'
						} 
					}
				}
            }
        }
        stage('Static Analysis') { 
            steps {
				/* Analisis estaticos, bajo un catch error para que den como resultado builds inestables pero no detengan todo el proceso */
				catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh 'cppcheck --error-exitcode=2 --inline-suppr --suppress=*:*test/* --enable=style --force src/'
                }
            }
        }
    }

    post {
		always {
			sh 'echo Pipeline Finalizada.'
			/* Log de todos los issues/warnings de la consola y marco como inestable la build entera */
			recordIssues(
				enabledForFailure: true, aggregatingResults: true,
				tools: [gcc()]
			)
			findText(textFinders: [
				textFinder(regexp: 'warning', alsoCheckConsoleOutput: true, buildResult: 'UNSTABLE')
			])
		}
        success {
			sh 'echo success'
        }
        unsuccessful {
            script {
                emailext (
                    to: '${DEFAULT_RECIPIENTS}',
                    subject: "Unsuccessful build ${env.BUILD_ID}",
                    body: "Build ${env.BUILD_ID} has result ${currentBuild.currentResult}"
                )
            }
        }
    }
}