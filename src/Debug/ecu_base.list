
ecu_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003638  08001f98  08001f98  00011f98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055d0  080055d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080055d0  080055d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055d0  080055d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d0  080055d0  000155d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055d4  080055d4  000155d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080055d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000fe4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ff0  20000ff0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004cea  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014d6  00000000  00000000  00024d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000598  00000000  00000000  00026200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000468  00000000  00000000  00026798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c080  00000000  00000000  00026c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007050  00000000  00000000  00042c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6838  00000000  00000000  00049cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f0508  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000118c  00000000  00000000  000f0558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f80 	.word	0x08001f80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001f80 	.word	0x08001f80

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f8d0 	bl	8000370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f803 	bl	80001da <SystemClock_Config>
  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  app_run();
 80001d4:	f001 fc3c 	bl	8001a50 <app_run>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d8:	e7fe      	b.n	80001d8 <main+0x10>

080001da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001da:	b580      	push	{r7, lr}
 80001dc:	b090      	sub	sp, #64	; 0x40
 80001de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e0:	f107 0318 	add.w	r3, r7, #24
 80001e4:	2228      	movs	r2, #40	; 0x28
 80001e6:	2100      	movs	r1, #0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fec1 	bl	8001f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	60da      	str	r2, [r3, #12]
 80001fa:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001fc:	2302      	movs	r3, #2
 80001fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000200:	2301      	movs	r3, #1
 8000202:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000204:	2310      	movs	r3, #16
 8000206:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000208:	2300      	movs	r3, #0
 800020a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020c:	f107 0318 	add.w	r3, r7, #24
 8000210:	4618      	mov	r0, r3
 8000212:	f000 f9f9 	bl	8000608 <HAL_RCC_OscConfig>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800021c:	f000 f818 	bl	8000250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000220:	230f      	movs	r3, #15
 8000222:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000224:	2300      	movs	r3, #0
 8000226:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2100      	movs	r1, #0
 8000238:	4618      	mov	r0, r3
 800023a:	f001 fa23 	bl	8001684 <HAL_RCC_ClockConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000244:	f000 f804 	bl	8000250 <Error_Handler>
  }
}
 8000248:	bf00      	nop
 800024a:	3740      	adds	r7, #64	; 0x40
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000254:	b672      	cpsid	i
}
 8000256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000258:	e7fe      	b.n	8000258 <Error_Handler+0x8>
	...

0800025c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000262:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <HAL_MspInit+0x44>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <HAL_MspInit+0x44>)
 8000268:	f043 0301 	orr.w	r3, r3, #1
 800026c:	6193      	str	r3, [r2, #24]
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <HAL_MspInit+0x44>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	f003 0301 	and.w	r3, r3, #1
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <HAL_MspInit+0x44>)
 800027c:	69db      	ldr	r3, [r3, #28]
 800027e:	4a08      	ldr	r2, [pc, #32]	; (80002a0 <HAL_MspInit+0x44>)
 8000280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000284:	61d3      	str	r3, [r2, #28]
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <HAL_MspInit+0x44>)
 8000288:	69db      	ldr	r3, [r3, #28]
 800028a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800028e:	603b      	str	r3, [r7, #0]
 8000290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40021000 	.word	0x40021000

080002a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <NMI_Handler+0x4>

080002aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002aa:	b480      	push	{r7}
 80002ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ae:	e7fe      	b.n	80002ae <HardFault_Handler+0x4>

080002b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002b4:	e7fe      	b.n	80002b4 <MemManage_Handler+0x4>

080002b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002b6:	b480      	push	{r7}
 80002b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002ba:	e7fe      	b.n	80002ba <BusFault_Handler+0x4>

080002bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002c0:	e7fe      	b.n	80002c0 <UsageFault_Handler+0x4>

080002c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002c2:	b480      	push	{r7}
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002c6:	bf00      	nop
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002e2:	bf00      	nop
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr

080002ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002f0:	f000 f884 	bl	80003fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <SystemInit+0x20>)
 80002fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000302:	4a05      	ldr	r2, [pc, #20]	; (8000318 <SystemInit+0x20>)
 8000304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	e000ed00 	.word	0xe000ed00

0800031c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800031c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000354 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000320:	480d      	ldr	r0, [pc, #52]	; (8000358 <LoopForever+0x6>)
  ldr r1, =_edata
 8000322:	490e      	ldr	r1, [pc, #56]	; (800035c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000324:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <LoopForever+0xe>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a0b      	ldr	r2, [pc, #44]	; (8000364 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000338:	4c0b      	ldr	r4, [pc, #44]	; (8000368 <LoopForever+0x16>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000346:	f7ff ffd7 	bl	80002f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800034a:	f001 fded 	bl	8001f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800034e:	f7ff ff3b 	bl	80001c8 <main>

08000352 <LoopForever>:

LoopForever:
    b LoopForever
 8000352:	e7fe      	b.n	8000352 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000354:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800035c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000360:	080055d8 	.word	0x080055d8
  ldr r2, =_sbss
 8000364:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000368:	20000ff0 	.word	0x20000ff0

0800036c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800036c:	e7fe      	b.n	800036c <ADC1_2_IRQHandler>
	...

08000370 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <HAL_Init+0x28>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a07      	ldr	r2, [pc, #28]	; (8000398 <HAL_Init+0x28>)
 800037a:	f043 0310 	orr.w	r3, r3, #16
 800037e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000380:	2003      	movs	r0, #3
 8000382:	f000 f90d 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000386:	200f      	movs	r0, #15
 8000388:	f000 f808 	bl	800039c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800038c:	f7ff ff66 	bl	800025c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000390:	2300      	movs	r3, #0
}
 8000392:	4618      	mov	r0, r3
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40022000 	.word	0x40022000

0800039c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <HAL_InitTick+0x54>)
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <HAL_InitTick+0x58>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	4619      	mov	r1, r3
 80003ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80003b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f917 	bl	80005ee <HAL_SYSTICK_Config>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003c6:	2301      	movs	r3, #1
 80003c8:	e00e      	b.n	80003e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2b0f      	cmp	r3, #15
 80003ce:	d80a      	bhi.n	80003e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003d0:	2200      	movs	r2, #0
 80003d2:	6879      	ldr	r1, [r7, #4]
 80003d4:	f04f 30ff 	mov.w	r0, #4294967295
 80003d8:	f000 f8ed 	bl	80005b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003dc:	4a06      	ldr	r2, [pc, #24]	; (80003f8 <HAL_InitTick+0x5c>)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80003e2:	2300      	movs	r3, #0
 80003e4:	e000      	b.n	80003e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80003e6:	2301      	movs	r3, #1
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000000 	.word	0x20000000
 80003f4:	20000008 	.word	0x20000008
 80003f8:	20000004 	.word	0x20000004

080003fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <HAL_IncTick+0x20>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	461a      	mov	r2, r3
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <HAL_IncTick+0x24>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4413      	add	r3, r2
 800040c:	4a04      	ldr	r2, [pc, #16]	; (8000420 <HAL_IncTick+0x24>)
 800040e:	6013      	str	r3, [r2, #0]
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	20000008 	.word	0x20000008
 8000420:	20000028 	.word	0x20000028

08000424 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  return uwTick;  
 8000428:	4b03      	ldr	r3, [pc, #12]	; (8000438 <HAL_GetTick+0x14>)
 800042a:	681b      	ldr	r3, [r3, #0]
}
 800042c:	4618      	mov	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	20000028 	.word	0x20000028

0800043c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	f003 0307 	and.w	r3, r3, #7
 800044a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800044c:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <__NVIC_SetPriorityGrouping+0x44>)
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000452:	68ba      	ldr	r2, [r7, #8]
 8000454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000458:	4013      	ands	r3, r2
 800045a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800046c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800046e:	4a04      	ldr	r2, [pc, #16]	; (8000480 <__NVIC_SetPriorityGrouping+0x44>)
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	60d3      	str	r3, [r2, #12]
}
 8000474:	bf00      	nop
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	e000ed00 	.word	0xe000ed00

08000484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000488:	4b04      	ldr	r3, [pc, #16]	; (800049c <__NVIC_GetPriorityGrouping+0x18>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	0a1b      	lsrs	r3, r3, #8
 800048e:	f003 0307 	and.w	r3, r3, #7
}
 8000492:	4618      	mov	r0, r3
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	e000ed00 	.word	0xe000ed00

080004a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	6039      	str	r1, [r7, #0]
 80004aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	db0a      	blt.n	80004ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	490c      	ldr	r1, [pc, #48]	; (80004ec <__NVIC_SetPriority+0x4c>)
 80004ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004be:	0112      	lsls	r2, r2, #4
 80004c0:	b2d2      	uxtb	r2, r2
 80004c2:	440b      	add	r3, r1
 80004c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004c8:	e00a      	b.n	80004e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4908      	ldr	r1, [pc, #32]	; (80004f0 <__NVIC_SetPriority+0x50>)
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	f003 030f 	and.w	r3, r3, #15
 80004d6:	3b04      	subs	r3, #4
 80004d8:	0112      	lsls	r2, r2, #4
 80004da:	b2d2      	uxtb	r2, r2
 80004dc:	440b      	add	r3, r1
 80004de:	761a      	strb	r2, [r3, #24]
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	e000e100 	.word	0xe000e100
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b089      	sub	sp, #36	; 0x24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f003 0307 	and.w	r3, r3, #7
 8000506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000508:	69fb      	ldr	r3, [r7, #28]
 800050a:	f1c3 0307 	rsb	r3, r3, #7
 800050e:	2b04      	cmp	r3, #4
 8000510:	bf28      	it	cs
 8000512:	2304      	movcs	r3, #4
 8000514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000516:	69fb      	ldr	r3, [r7, #28]
 8000518:	3304      	adds	r3, #4
 800051a:	2b06      	cmp	r3, #6
 800051c:	d902      	bls.n	8000524 <NVIC_EncodePriority+0x30>
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	3b03      	subs	r3, #3
 8000522:	e000      	b.n	8000526 <NVIC_EncodePriority+0x32>
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000528:	f04f 32ff 	mov.w	r2, #4294967295
 800052c:	69bb      	ldr	r3, [r7, #24]
 800052e:	fa02 f303 	lsl.w	r3, r2, r3
 8000532:	43da      	mvns	r2, r3
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	401a      	ands	r2, r3
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800053c:	f04f 31ff 	mov.w	r1, #4294967295
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	fa01 f303 	lsl.w	r3, r1, r3
 8000546:	43d9      	mvns	r1, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800054c:	4313      	orrs	r3, r2
         );
}
 800054e:	4618      	mov	r0, r3
 8000550:	3724      	adds	r7, #36	; 0x24
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
	...

0800055c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3b01      	subs	r3, #1
 8000568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800056c:	d301      	bcc.n	8000572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800056e:	2301      	movs	r3, #1
 8000570:	e00f      	b.n	8000592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000572:	4a0a      	ldr	r2, [pc, #40]	; (800059c <SysTick_Config+0x40>)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3b01      	subs	r3, #1
 8000578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800057a:	210f      	movs	r1, #15
 800057c:	f04f 30ff 	mov.w	r0, #4294967295
 8000580:	f7ff ff8e 	bl	80004a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <SysTick_Config+0x40>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <SysTick_Config+0x40>)
 800058c:	2207      	movs	r2, #7
 800058e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000590:	2300      	movs	r3, #0
}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	e000e010 	.word	0xe000e010

080005a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff ff47 	bl	800043c <__NVIC_SetPriorityGrouping>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b086      	sub	sp, #24
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	4603      	mov	r3, r0
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
 80005c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80005c8:	f7ff ff5c 	bl	8000484 <__NVIC_GetPriorityGrouping>
 80005cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	68b9      	ldr	r1, [r7, #8]
 80005d2:	6978      	ldr	r0, [r7, #20]
 80005d4:	f7ff ff8e 	bl	80004f4 <NVIC_EncodePriority>
 80005d8:	4602      	mov	r2, r0
 80005da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005de:	4611      	mov	r1, r2
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ff5d 	bl	80004a0 <__NVIC_SetPriority>
}
 80005e6:	bf00      	nop
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff ffb0 	bl	800055c <SysTick_Config>
 80005fc:	4603      	mov	r3, r0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800060e:	af00      	add	r7, sp, #0
 8000610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000618:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800061a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800061e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d102      	bne.n	800062e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000628:	2301      	movs	r3, #1
 800062a:	f001 b823 	b.w	8001674 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800062e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	2b00      	cmp	r3, #0
 8000640:	f000 817d 	beq.w	800093e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000644:	4bbc      	ldr	r3, [pc, #752]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	f003 030c 	and.w	r3, r3, #12
 800064c:	2b04      	cmp	r3, #4
 800064e:	d00c      	beq.n	800066a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000650:	4bb9      	ldr	r3, [pc, #740]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	f003 030c 	and.w	r3, r3, #12
 8000658:	2b08      	cmp	r3, #8
 800065a:	d15c      	bne.n	8000716 <HAL_RCC_OscConfig+0x10e>
 800065c:	4bb6      	ldr	r3, [pc, #728]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000668:	d155      	bne.n	8000716 <HAL_RCC_OscConfig+0x10e>
 800066a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800066e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000672:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000676:	fa93 f3a3 	rbit	r3, r3
 800067a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800067e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000682:	fab3 f383 	clz	r3, r3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	095b      	lsrs	r3, r3, #5
 800068a:	b2db      	uxtb	r3, r3
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	2b01      	cmp	r3, #1
 8000694:	d102      	bne.n	800069c <HAL_RCC_OscConfig+0x94>
 8000696:	4ba8      	ldr	r3, [pc, #672]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	e015      	b.n	80006c8 <HAL_RCC_OscConfig+0xc0>
 800069c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006a0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006a4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80006a8:	fa93 f3a3 	rbit	r3, r3
 80006ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80006b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006b4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80006b8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80006bc:	fa93 f3a3 	rbit	r3, r3
 80006c0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80006c4:	4b9c      	ldr	r3, [pc, #624]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 80006c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80006cc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80006d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80006d4:	fa92 f2a2 	rbit	r2, r2
 80006d8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80006dc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80006e0:	fab2 f282 	clz	r2, r2
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	f042 0220 	orr.w	r2, r2, #32
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	f002 021f 	and.w	r2, r2, #31
 80006f0:	2101      	movs	r1, #1
 80006f2:	fa01 f202 	lsl.w	r2, r1, r2
 80006f6:	4013      	ands	r3, r2
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	f000 811f 	beq.w	800093c <HAL_RCC_OscConfig+0x334>
 80006fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	f040 8116 	bne.w	800093c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000710:	2301      	movs	r3, #1
 8000712:	f000 bfaf 	b.w	8001674 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800071a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000726:	d106      	bne.n	8000736 <HAL_RCC_OscConfig+0x12e>
 8000728:	4b83      	ldr	r3, [pc, #524]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a82      	ldr	r2, [pc, #520]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 800072e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	e036      	b.n	80007a4 <HAL_RCC_OscConfig+0x19c>
 8000736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800073a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d10c      	bne.n	8000760 <HAL_RCC_OscConfig+0x158>
 8000746:	4b7c      	ldr	r3, [pc, #496]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a7b      	ldr	r2, [pc, #492]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 800074c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000750:	6013      	str	r3, [r2, #0]
 8000752:	4b79      	ldr	r3, [pc, #484]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a78      	ldr	r2, [pc, #480]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 8000758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800075c:	6013      	str	r3, [r2, #0]
 800075e:	e021      	b.n	80007a4 <HAL_RCC_OscConfig+0x19c>
 8000760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000764:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000770:	d10c      	bne.n	800078c <HAL_RCC_OscConfig+0x184>
 8000772:	4b71      	ldr	r3, [pc, #452]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a70      	ldr	r2, [pc, #448]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 8000778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800077c:	6013      	str	r3, [r2, #0]
 800077e:	4b6e      	ldr	r3, [pc, #440]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a6d      	ldr	r2, [pc, #436]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 8000784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000788:	6013      	str	r3, [r2, #0]
 800078a:	e00b      	b.n	80007a4 <HAL_RCC_OscConfig+0x19c>
 800078c:	4b6a      	ldr	r3, [pc, #424]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a69      	ldr	r2, [pc, #420]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 8000792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4b67      	ldr	r3, [pc, #412]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a66      	ldr	r2, [pc, #408]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 800079e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007a2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80007a4:	4b64      	ldr	r3, [pc, #400]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 80007a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a8:	f023 020f 	bic.w	r2, r3, #15
 80007ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80007b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	495f      	ldr	r1, [pc, #380]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 80007ba:	4313      	orrs	r3, r2
 80007bc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80007c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d059      	beq.n	8000882 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007ce:	f7ff fe29 	bl	8000424 <HAL_GetTick>
 80007d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007d6:	e00a      	b.n	80007ee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007d8:	f7ff fe24 	bl	8000424 <HAL_GetTick>
 80007dc:	4602      	mov	r2, r0
 80007de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	2b64      	cmp	r3, #100	; 0x64
 80007e6:	d902      	bls.n	80007ee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80007e8:	2303      	movs	r3, #3
 80007ea:	f000 bf43 	b.w	8001674 <HAL_RCC_OscConfig+0x106c>
 80007ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80007fa:	fa93 f3a3 	rbit	r3, r3
 80007fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000802:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000806:	fab3 f383 	clz	r3, r3
 800080a:	b2db      	uxtb	r3, r3
 800080c:	095b      	lsrs	r3, r3, #5
 800080e:	b2db      	uxtb	r3, r3
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b01      	cmp	r3, #1
 8000818:	d102      	bne.n	8000820 <HAL_RCC_OscConfig+0x218>
 800081a:	4b47      	ldr	r3, [pc, #284]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	e015      	b.n	800084c <HAL_RCC_OscConfig+0x244>
 8000820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000824:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000828:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800082c:	fa93 f3a3 	rbit	r3, r3
 8000830:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000838:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800083c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000840:	fa93 f3a3 	rbit	r3, r3
 8000844:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000848:	4b3b      	ldr	r3, [pc, #236]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 800084a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000850:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000854:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000858:	fa92 f2a2 	rbit	r2, r2
 800085c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000860:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000864:	fab2 f282 	clz	r2, r2
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	f042 0220 	orr.w	r2, r2, #32
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	f002 021f 	and.w	r2, r2, #31
 8000874:	2101      	movs	r1, #1
 8000876:	fa01 f202 	lsl.w	r2, r1, r2
 800087a:	4013      	ands	r3, r2
 800087c:	2b00      	cmp	r3, #0
 800087e:	d0ab      	beq.n	80007d8 <HAL_RCC_OscConfig+0x1d0>
 8000880:	e05d      	b.n	800093e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000882:	f7ff fdcf 	bl	8000424 <HAL_GetTick>
 8000886:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800088a:	e00a      	b.n	80008a2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800088c:	f7ff fdca 	bl	8000424 <HAL_GetTick>
 8000890:	4602      	mov	r2, r0
 8000892:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	2b64      	cmp	r3, #100	; 0x64
 800089a:	d902      	bls.n	80008a2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800089c:	2303      	movs	r3, #3
 800089e:	f000 bee9 	b.w	8001674 <HAL_RCC_OscConfig+0x106c>
 80008a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008a6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008aa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80008ae:	fa93 f3a3 	rbit	r3, r3
 80008b2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80008b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008ba:	fab3 f383 	clz	r3, r3
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	095b      	lsrs	r3, r3, #5
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d102      	bne.n	80008d4 <HAL_RCC_OscConfig+0x2cc>
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	e015      	b.n	8000900 <HAL_RCC_OscConfig+0x2f8>
 80008d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008d8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008dc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80008e0:	fa93 f3a3 	rbit	r3, r3
 80008e4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80008e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008ec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80008f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80008f4:	fa93 f3a3 	rbit	r3, r3
 80008f8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_RCC_OscConfig+0x330>)
 80008fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000900:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000904:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000908:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800090c:	fa92 f2a2 	rbit	r2, r2
 8000910:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000914:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000918:	fab2 f282 	clz	r2, r2
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	f042 0220 	orr.w	r2, r2, #32
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	f002 021f 	and.w	r2, r2, #31
 8000928:	2101      	movs	r1, #1
 800092a:	fa01 f202 	lsl.w	r2, r1, r2
 800092e:	4013      	ands	r3, r2
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1ab      	bne.n	800088c <HAL_RCC_OscConfig+0x284>
 8000934:	e003      	b.n	800093e <HAL_RCC_OscConfig+0x336>
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800093c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800093e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	2b00      	cmp	r3, #0
 8000950:	f000 817d 	beq.w	8000c4e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000954:	4ba6      	ldr	r3, [pc, #664]	; (8000bf0 <HAL_RCC_OscConfig+0x5e8>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f003 030c 	and.w	r3, r3, #12
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00b      	beq.n	8000978 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000960:	4ba3      	ldr	r3, [pc, #652]	; (8000bf0 <HAL_RCC_OscConfig+0x5e8>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f003 030c 	and.w	r3, r3, #12
 8000968:	2b08      	cmp	r3, #8
 800096a:	d172      	bne.n	8000a52 <HAL_RCC_OscConfig+0x44a>
 800096c:	4ba0      	ldr	r3, [pc, #640]	; (8000bf0 <HAL_RCC_OscConfig+0x5e8>)
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000974:	2b00      	cmp	r3, #0
 8000976:	d16c      	bne.n	8000a52 <HAL_RCC_OscConfig+0x44a>
 8000978:	2302      	movs	r3, #2
 800097a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800097e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000982:	fa93 f3a3 	rbit	r3, r3
 8000986:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800098a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800098e:	fab3 f383 	clz	r3, r3
 8000992:	b2db      	uxtb	r3, r3
 8000994:	095b      	lsrs	r3, r3, #5
 8000996:	b2db      	uxtb	r3, r3
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d102      	bne.n	80009a8 <HAL_RCC_OscConfig+0x3a0>
 80009a2:	4b93      	ldr	r3, [pc, #588]	; (8000bf0 <HAL_RCC_OscConfig+0x5e8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	e013      	b.n	80009d0 <HAL_RCC_OscConfig+0x3c8>
 80009a8:	2302      	movs	r3, #2
 80009aa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80009b2:	fa93 f3a3 	rbit	r3, r3
 80009b6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80009ba:	2302      	movs	r3, #2
 80009bc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80009c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80009c4:	fa93 f3a3 	rbit	r3, r3
 80009c8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80009cc:	4b88      	ldr	r3, [pc, #544]	; (8000bf0 <HAL_RCC_OscConfig+0x5e8>)
 80009ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d0:	2202      	movs	r2, #2
 80009d2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80009d6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80009da:	fa92 f2a2 	rbit	r2, r2
 80009de:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80009e2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80009e6:	fab2 f282 	clz	r2, r2
 80009ea:	b2d2      	uxtb	r2, r2
 80009ec:	f042 0220 	orr.w	r2, r2, #32
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	f002 021f 	and.w	r2, r2, #31
 80009f6:	2101      	movs	r1, #1
 80009f8:	fa01 f202 	lsl.w	r2, r1, r2
 80009fc:	4013      	ands	r3, r2
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d00a      	beq.n	8000a18 <HAL_RCC_OscConfig+0x410>
 8000a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000a06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	691b      	ldr	r3, [r3, #16]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d002      	beq.n	8000a18 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	f000 be2e 	b.w	8001674 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a18:	4b75      	ldr	r3, [pc, #468]	; (8000bf0 <HAL_RCC_OscConfig+0x5e8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000a24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	21f8      	movs	r1, #248	; 0xf8
 8000a2e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a32:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000a36:	fa91 f1a1 	rbit	r1, r1
 8000a3a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000a3e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000a42:	fab1 f181 	clz	r1, r1
 8000a46:	b2c9      	uxtb	r1, r1
 8000a48:	408b      	lsls	r3, r1
 8000a4a:	4969      	ldr	r1, [pc, #420]	; (8000bf0 <HAL_RCC_OscConfig+0x5e8>)
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a50:	e0fd      	b.n	8000c4e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	691b      	ldr	r3, [r3, #16]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f000 8088 	beq.w	8000b74 <HAL_RCC_OscConfig+0x56c>
 8000a64:	2301      	movs	r3, #1
 8000a66:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000a6e:	fa93 f3a3 	rbit	r3, r3
 8000a72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000a76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a7a:	fab3 f383 	clz	r3, r3
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a90:	f7ff fcc8 	bl	8000424 <HAL_GetTick>
 8000a94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a98:	e00a      	b.n	8000ab0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a9a:	f7ff fcc3 	bl	8000424 <HAL_GetTick>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d902      	bls.n	8000ab0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	f000 bde2 	b.w	8001674 <HAL_RCC_OscConfig+0x106c>
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000aba:	fa93 f3a3 	rbit	r3, r3
 8000abe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000ac2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ac6:	fab3 f383 	clz	r3, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	095b      	lsrs	r3, r3, #5
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d102      	bne.n	8000ae0 <HAL_RCC_OscConfig+0x4d8>
 8000ada:	4b45      	ldr	r3, [pc, #276]	; (8000bf0 <HAL_RCC_OscConfig+0x5e8>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	e013      	b.n	8000b08 <HAL_RCC_OscConfig+0x500>
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ae6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000aea:	fa93 f3a3 	rbit	r3, r3
 8000aee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000af2:	2302      	movs	r3, #2
 8000af4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000af8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000afc:	fa93 f3a3 	rbit	r3, r3
 8000b00:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000b04:	4b3a      	ldr	r3, [pc, #232]	; (8000bf0 <HAL_RCC_OscConfig+0x5e8>)
 8000b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b08:	2202      	movs	r2, #2
 8000b0a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000b0e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000b12:	fa92 f2a2 	rbit	r2, r2
 8000b16:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000b1a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000b1e:	fab2 f282 	clz	r2, r2
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	f042 0220 	orr.w	r2, r2, #32
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	f002 021f 	and.w	r2, r2, #31
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fa01 f202 	lsl.w	r2, r1, r2
 8000b34:	4013      	ands	r3, r2
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d0af      	beq.n	8000a9a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b3a:	4b2d      	ldr	r3, [pc, #180]	; (8000bf0 <HAL_RCC_OscConfig+0x5e8>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	21f8      	movs	r1, #248	; 0xf8
 8000b50:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b54:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000b58:	fa91 f1a1 	rbit	r1, r1
 8000b5c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8000b60:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000b64:	fab1 f181 	clz	r1, r1
 8000b68:	b2c9      	uxtb	r1, r1
 8000b6a:	408b      	lsls	r3, r1
 8000b6c:	4920      	ldr	r1, [pc, #128]	; (8000bf0 <HAL_RCC_OscConfig+0x5e8>)
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	600b      	str	r3, [r1, #0]
 8000b72:	e06c      	b.n	8000c4e <HAL_RCC_OscConfig+0x646>
 8000b74:	2301      	movs	r3, #1
 8000b76:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000b7e:	fa93 f3a3 	rbit	r3, r3
 8000b82:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8000b86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b8a:	fab3 f383 	clz	r3, r3
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba0:	f7ff fc40 	bl	8000424 <HAL_GetTick>
 8000ba4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ba8:	e00a      	b.n	8000bc0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000baa:	f7ff fc3b 	bl	8000424 <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d902      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	f000 bd5a 	b.w	8001674 <HAL_RCC_OscConfig+0x106c>
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000bca:	fa93 f3a3 	rbit	r3, r3
 8000bce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8000bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bd6:	fab3 f383 	clz	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	095b      	lsrs	r3, r3, #5
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d104      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x5ec>
 8000bea:	4b01      	ldr	r3, [pc, #4]	; (8000bf0 <HAL_RCC_OscConfig+0x5e8>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	e015      	b.n	8000c1c <HAL_RCC_OscConfig+0x614>
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000bfe:	fa93 f3a3 	rbit	r3, r3
 8000c02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000c06:	2302      	movs	r3, #2
 8000c08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000c0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c10:	fa93 f3a3 	rbit	r3, r3
 8000c14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000c18:	4bc8      	ldr	r3, [pc, #800]	; (8000f3c <HAL_RCC_OscConfig+0x934>)
 8000c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8000c22:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000c26:	fa92 f2a2 	rbit	r2, r2
 8000c2a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8000c2e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000c32:	fab2 f282 	clz	r2, r2
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	f042 0220 	orr.w	r2, r2, #32
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	f002 021f 	and.w	r2, r2, #31
 8000c42:	2101      	movs	r1, #1
 8000c44:	fa01 f202 	lsl.w	r2, r1, r2
 8000c48:	4013      	ands	r3, r2
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1ad      	bne.n	8000baa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 8110 	beq.w	8000e84 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d079      	beq.n	8000d68 <HAL_RCC_OscConfig+0x760>
 8000c74:	2301      	movs	r3, #1
 8000c76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c7e:	fa93 f3a3 	rbit	r3, r3
 8000c82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8000c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c8a:	fab3 f383 	clz	r3, r3
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	461a      	mov	r2, r3
 8000c92:	4bab      	ldr	r3, [pc, #684]	; (8000f40 <HAL_RCC_OscConfig+0x938>)
 8000c94:	4413      	add	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c9e:	f7ff fbc1 	bl	8000424 <HAL_GetTick>
 8000ca2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ca6:	e00a      	b.n	8000cbe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ca8:	f7ff fbbc 	bl	8000424 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d902      	bls.n	8000cbe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	f000 bcdb 	b.w	8001674 <HAL_RCC_OscConfig+0x106c>
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000cc8:	fa93 f3a3 	rbit	r3, r3
 8000ccc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cd4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000cd8:	2202      	movs	r2, #2
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ce0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	fa93 f2a3 	rbit	r2, r3
 8000cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	fa93 f2a3 	rbit	r2, r3
 8000d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d18:	4b88      	ldr	r3, [pc, #544]	; (8000f3c <HAL_RCC_OscConfig+0x934>)
 8000d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000d24:	2102      	movs	r1, #2
 8000d26:	6019      	str	r1, [r3, #0]
 8000d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	fa93 f1a3 	rbit	r1, r3
 8000d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000d3e:	6019      	str	r1, [r3, #0]
  return result;
 8000d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d44:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	fab3 f383 	clz	r3, r3
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	f003 031f 	and.w	r3, r3, #31
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	4013      	ands	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0a0      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x6a0>
 8000d66:	e08d      	b.n	8000e84 <HAL_RCC_OscConfig+0x87c>
 8000d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d6c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000d70:	2201      	movs	r2, #1
 8000d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	fa93 f2a3 	rbit	r2, r3
 8000d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000d8a:	601a      	str	r2, [r3, #0]
  return result;
 8000d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000d94:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d96:	fab3 f383 	clz	r3, r3
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b68      	ldr	r3, [pc, #416]	; (8000f40 <HAL_RCC_OscConfig+0x938>)
 8000da0:	4413      	add	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	461a      	mov	r2, r3
 8000da6:	2300      	movs	r3, #0
 8000da8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000daa:	f7ff fb3b 	bl	8000424 <HAL_GetTick>
 8000dae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db2:	e00a      	b.n	8000dca <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000db4:	f7ff fb36 	bl	8000424 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d902      	bls.n	8000dca <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	f000 bc55 	b.w	8001674 <HAL_RCC_OscConfig+0x106c>
 8000dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dda:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	fa93 f2a3 	rbit	r2, r3
 8000de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000de8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000df6:	2202      	movs	r2, #2
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dfe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	fa93 f2a3 	rbit	r2, r3
 8000e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	fa93 f2a3 	rbit	r2, r3
 8000e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e30:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000e34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e36:	4b41      	ldr	r3, [pc, #260]	; (8000f3c <HAL_RCC_OscConfig+0x934>)
 8000e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e3e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000e42:	2102      	movs	r1, #2
 8000e44:	6019      	str	r1, [r3, #0]
 8000e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e4a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	fa93 f1a3 	rbit	r1, r3
 8000e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000e5c:	6019      	str	r1, [r3, #0]
  return result;
 8000e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e62:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	fab3 f383 	clz	r3, r3
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	f003 031f 	and.w	r3, r3, #31
 8000e78:	2101      	movs	r1, #1
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d197      	bne.n	8000db4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0304 	and.w	r3, r3, #4
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 81a1 	beq.w	80011dc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ea0:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <HAL_RCC_OscConfig+0x934>)
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d116      	bne.n	8000eda <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eac:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <HAL_RCC_OscConfig+0x934>)
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <HAL_RCC_OscConfig+0x934>)
 8000eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	61d3      	str	r3, [r2, #28]
 8000eb8:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <HAL_RCC_OscConfig+0x934>)
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ec4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ece:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000ed2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <HAL_RCC_OscConfig+0x93c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d11a      	bne.n	8000f1c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_RCC_OscConfig+0x93c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <HAL_RCC_OscConfig+0x93c>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ef2:	f7ff fa97 	bl	8000424 <HAL_GetTick>
 8000ef6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efa:	e009      	b.n	8000f10 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000efc:	f7ff fa92 	bl	8000424 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b64      	cmp	r3, #100	; 0x64
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e3b1      	b.n	8001674 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_RCC_OscConfig+0x93c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0ef      	beq.n	8000efc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d10d      	bne.n	8000f48 <HAL_RCC_OscConfig+0x940>
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <HAL_RCC_OscConfig+0x934>)
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	4a02      	ldr	r2, [pc, #8]	; (8000f3c <HAL_RCC_OscConfig+0x934>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6213      	str	r3, [r2, #32]
 8000f38:	e03c      	b.n	8000fb4 <HAL_RCC_OscConfig+0x9ac>
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	10908120 	.word	0x10908120
 8000f44:	40007000 	.word	0x40007000
 8000f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d10c      	bne.n	8000f72 <HAL_RCC_OscConfig+0x96a>
 8000f58:	4bc1      	ldr	r3, [pc, #772]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	4ac0      	ldr	r2, [pc, #768]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 8000f5e:	f023 0301 	bic.w	r3, r3, #1
 8000f62:	6213      	str	r3, [r2, #32]
 8000f64:	4bbe      	ldr	r3, [pc, #760]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	4abd      	ldr	r2, [pc, #756]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 8000f6a:	f023 0304 	bic.w	r3, r3, #4
 8000f6e:	6213      	str	r3, [r2, #32]
 8000f70:	e020      	b.n	8000fb4 <HAL_RCC_OscConfig+0x9ac>
 8000f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	2b05      	cmp	r3, #5
 8000f80:	d10c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x994>
 8000f82:	4bb7      	ldr	r3, [pc, #732]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	4ab6      	ldr	r2, [pc, #728]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	6213      	str	r3, [r2, #32]
 8000f8e:	4bb4      	ldr	r3, [pc, #720]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	4ab3      	ldr	r2, [pc, #716]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6213      	str	r3, [r2, #32]
 8000f9a:	e00b      	b.n	8000fb4 <HAL_RCC_OscConfig+0x9ac>
 8000f9c:	4bb0      	ldr	r3, [pc, #704]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	4aaf      	ldr	r2, [pc, #700]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 8000fa2:	f023 0301 	bic.w	r3, r3, #1
 8000fa6:	6213      	str	r3, [r2, #32]
 8000fa8:	4bad      	ldr	r3, [pc, #692]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 8000faa:	6a1b      	ldr	r3, [r3, #32]
 8000fac:	4aac      	ldr	r2, [pc, #688]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 8000fae:	f023 0304 	bic.w	r3, r3, #4
 8000fb2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 8081 	beq.w	80010c8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc6:	f7ff fa2d 	bl	8000424 <HAL_GetTick>
 8000fca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fce:	e00b      	b.n	8000fe8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fa28 	bl	8000424 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e345      	b.n	8001674 <HAL_RCC_OscConfig+0x106c>
 8000fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ff8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	fa93 f2a3 	rbit	r2, r3
 8001002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001006:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001010:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001014:	2202      	movs	r2, #2
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800101c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	fa93 f2a3 	rbit	r2, r3
 8001026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800102a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800102e:	601a      	str	r2, [r3, #0]
  return result;
 8001030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001034:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001038:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800103a:	fab3 f383 	clz	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	095b      	lsrs	r3, r3, #5
 8001042:	b2db      	uxtb	r3, r3
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d102      	bne.n	8001054 <HAL_RCC_OscConfig+0xa4c>
 800104e:	4b84      	ldr	r3, [pc, #528]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	e013      	b.n	800107c <HAL_RCC_OscConfig+0xa74>
 8001054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001058:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800105c:	2202      	movs	r2, #2
 800105e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001064:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	fa93 f2a3 	rbit	r2, r3
 800106e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001072:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	4b79      	ldr	r3, [pc, #484]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001080:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001084:	2102      	movs	r1, #2
 8001086:	6011      	str	r1, [r2, #0]
 8001088:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800108c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001090:	6812      	ldr	r2, [r2, #0]
 8001092:	fa92 f1a2 	rbit	r1, r2
 8001096:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800109a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800109e:	6011      	str	r1, [r2, #0]
  return result;
 80010a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80010a4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	fab2 f282 	clz	r2, r2
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	f002 021f 	and.w	r2, r2, #31
 80010ba:	2101      	movs	r1, #1
 80010bc:	fa01 f202 	lsl.w	r2, r1, r2
 80010c0:	4013      	ands	r3, r2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d084      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x9c8>
 80010c6:	e07f      	b.n	80011c8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c8:	f7ff f9ac 	bl	8000424 <HAL_GetTick>
 80010cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d0:	e00b      	b.n	80010ea <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010d2:	f7ff f9a7 	bl	8000424 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e2c4      	b.n	8001674 <HAL_RCC_OscConfig+0x106c>
 80010ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80010f2:	2202      	movs	r2, #2
 80010f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	fa93 f2a3 	rbit	r2, r3
 8001104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001108:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001112:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001116:	2202      	movs	r2, #2
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800111e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	fa93 f2a3 	rbit	r2, r3
 8001128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800112c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001130:	601a      	str	r2, [r3, #0]
  return result;
 8001132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001136:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800113a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800113c:	fab3 f383 	clz	r3, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	b2db      	uxtb	r3, r3
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d102      	bne.n	8001156 <HAL_RCC_OscConfig+0xb4e>
 8001150:	4b43      	ldr	r3, [pc, #268]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	e013      	b.n	800117e <HAL_RCC_OscConfig+0xb76>
 8001156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800115e:	2202      	movs	r2, #2
 8001160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001166:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	fa93 f2a3 	rbit	r2, r3
 8001170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001174:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	4b39      	ldr	r3, [pc, #228]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001182:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001186:	2102      	movs	r1, #2
 8001188:	6011      	str	r1, [r2, #0]
 800118a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800118e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	fa92 f1a2 	rbit	r1, r2
 8001198:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800119c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80011a0:	6011      	str	r1, [r2, #0]
  return result;
 80011a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80011a6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80011aa:	6812      	ldr	r2, [r2, #0]
 80011ac:	fab2 f282 	clz	r2, r2
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	f002 021f 	and.w	r2, r2, #31
 80011bc:	2101      	movs	r1, #1
 80011be:	fa01 f202 	lsl.w	r2, r1, r2
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d184      	bne.n	80010d2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d105      	bne.n	80011dc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	4a22      	ldr	r2, [pc, #136]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 80011d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 8242 	beq.w	8001672 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <HAL_RCC_OscConfig+0xc58>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	f000 8213 	beq.w	8001622 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001200:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	2b02      	cmp	r3, #2
 800120a:	f040 8162 	bne.w	80014d2 <HAL_RCC_OscConfig+0xeca>
 800120e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001212:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001216:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800121a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001220:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	fa93 f2a3 	rbit	r2, r3
 800122a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800122e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001232:	601a      	str	r2, [r3, #0]
  return result;
 8001234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001238:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800123c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800123e:	fab3 f383 	clz	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001248:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	461a      	mov	r2, r3
 8001250:	2300      	movs	r3, #0
 8001252:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff f8e6 	bl	8000424 <HAL_GetTick>
 8001258:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800125c:	e00c      	b.n	8001278 <HAL_RCC_OscConfig+0xc70>
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001264:	f7ff f8de 	bl	8000424 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e1fd      	b.n	8001674 <HAL_RCC_OscConfig+0x106c>
 8001278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800127c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001280:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800128a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	fa93 f2a3 	rbit	r2, r3
 8001294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001298:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800129c:	601a      	str	r2, [r3, #0]
  return result;
 800129e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80012a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a8:	fab3 f383 	clz	r3, r3
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	095b      	lsrs	r3, r3, #5
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d102      	bne.n	80012c2 <HAL_RCC_OscConfig+0xcba>
 80012bc:	4bb0      	ldr	r3, [pc, #704]	; (8001580 <HAL_RCC_OscConfig+0xf78>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	e027      	b.n	8001312 <HAL_RCC_OscConfig+0xd0a>
 80012c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012c6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80012ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	fa93 f2a3 	rbit	r2, r3
 80012de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80012f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012fa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	fa93 f2a3 	rbit	r2, r3
 8001304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001308:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	4b9c      	ldr	r3, [pc, #624]	; (8001580 <HAL_RCC_OscConfig+0xf78>)
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001316:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800131a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800131e:	6011      	str	r1, [r2, #0]
 8001320:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001324:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	fa92 f1a2 	rbit	r1, r2
 800132e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001332:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001336:	6011      	str	r1, [r2, #0]
  return result;
 8001338:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800133c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001340:	6812      	ldr	r2, [r2, #0]
 8001342:	fab2 f282 	clz	r2, r2
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	f042 0220 	orr.w	r2, r2, #32
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	f002 021f 	and.w	r2, r2, #31
 8001352:	2101      	movs	r1, #1
 8001354:	fa01 f202 	lsl.w	r2, r1, r2
 8001358:	4013      	ands	r3, r2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d182      	bne.n	8001264 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800135e:	4b88      	ldr	r3, [pc, #544]	; (8001580 <HAL_RCC_OscConfig+0xf78>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800136a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001376:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	430b      	orrs	r3, r1
 8001380:	497f      	ldr	r1, [pc, #508]	; (8001580 <HAL_RCC_OscConfig+0xf78>)
 8001382:	4313      	orrs	r3, r2
 8001384:	604b      	str	r3, [r1, #4]
 8001386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800138a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800138e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001398:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	fa93 f2a3 	rbit	r2, r3
 80013a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80013aa:	601a      	str	r2, [r3, #0]
  return result;
 80013ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80013b4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b6:	fab3 f383 	clz	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	461a      	mov	r2, r3
 80013c8:	2301      	movs	r3, #1
 80013ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff f82a 	bl	8000424 <HAL_GetTick>
 80013d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d4:	e009      	b.n	80013ea <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d6:	f7ff f825 	bl	8000424 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e144      	b.n	8001674 <HAL_RCC_OscConfig+0x106c>
 80013ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80013f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	fa93 f2a3 	rbit	r2, r3
 8001406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800140e:	601a      	str	r2, [r3, #0]
  return result;
 8001410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001414:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001418:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800141a:	fab3 f383 	clz	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	095b      	lsrs	r3, r3, #5
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b01      	cmp	r3, #1
 800142c:	d102      	bne.n	8001434 <HAL_RCC_OscConfig+0xe2c>
 800142e:	4b54      	ldr	r3, [pc, #336]	; (8001580 <HAL_RCC_OscConfig+0xf78>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	e027      	b.n	8001484 <HAL_RCC_OscConfig+0xe7c>
 8001434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001438:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800143c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001446:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	fa93 f2a3 	rbit	r2, r3
 8001450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001454:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001462:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	fa93 f2a3 	rbit	r2, r3
 8001476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <HAL_RCC_OscConfig+0xf78>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001488:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800148c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001490:	6011      	str	r1, [r2, #0]
 8001492:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001496:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	fa92 f1a2 	rbit	r1, r2
 80014a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80014a4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80014a8:	6011      	str	r1, [r2, #0]
  return result;
 80014aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80014ae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	fab2 f282 	clz	r2, r2
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	f042 0220 	orr.w	r2, r2, #32
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	f002 021f 	and.w	r2, r2, #31
 80014c4:	2101      	movs	r1, #1
 80014c6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d082      	beq.n	80013d6 <HAL_RCC_OscConfig+0xdce>
 80014d0:	e0cf      	b.n	8001672 <HAL_RCC_OscConfig+0x106a>
 80014d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80014da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	fa93 f2a3 	rbit	r2, r3
 80014ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80014f6:	601a      	str	r2, [r3, #0]
  return result;
 80014f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001500:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800150c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	461a      	mov	r2, r3
 8001514:	2300      	movs	r3, #0
 8001516:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7fe ff84 	bl	8000424 <HAL_GetTick>
 800151c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001520:	e009      	b.n	8001536 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001522:	f7fe ff7f 	bl	8000424 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e09e      	b.n	8001674 <HAL_RCC_OscConfig+0x106c>
 8001536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800153e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001548:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fa93 f2a3 	rbit	r2, r3
 8001552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001556:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800155a:	601a      	str	r2, [r3, #0]
  return result;
 800155c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001560:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001564:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001566:	fab3 f383 	clz	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	095b      	lsrs	r3, r3, #5
 800156e:	b2db      	uxtb	r3, r3
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b01      	cmp	r3, #1
 8001578:	d104      	bne.n	8001584 <HAL_RCC_OscConfig+0xf7c>
 800157a:	4b01      	ldr	r3, [pc, #4]	; (8001580 <HAL_RCC_OscConfig+0xf78>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	e029      	b.n	80015d4 <HAL_RCC_OscConfig+0xfcc>
 8001580:	40021000 	.word	0x40021000
 8001584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001588:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800158c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	fa93 f2a3 	rbit	r2, r3
 80015a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80015b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015bc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	fa93 f2a3 	rbit	r2, r3
 80015c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <HAL_RCC_OscConfig+0x1078>)
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015d8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80015dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80015e0:	6011      	str	r1, [r2, #0]
 80015e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015e6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	fa92 f1a2 	rbit	r1, r2
 80015f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015f4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80015f8:	6011      	str	r1, [r2, #0]
  return result;
 80015fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015fe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	fab2 f282 	clz	r2, r2
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	f042 0220 	orr.w	r2, r2, #32
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	f002 021f 	and.w	r2, r2, #31
 8001614:	2101      	movs	r1, #1
 8001616:	fa01 f202 	lsl.w	r2, r1, r2
 800161a:	4013      	ands	r3, r2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d180      	bne.n	8001522 <HAL_RCC_OscConfig+0xf1a>
 8001620:	e027      	b.n	8001672 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e01e      	b.n	8001674 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001636:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_RCC_OscConfig+0x1078>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800163e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001642:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	429a      	cmp	r2, r3
 8001654:	d10b      	bne.n	800166e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001656:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800165a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800165e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001662:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800166a:	429a      	cmp	r2, r3
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000

08001684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b09e      	sub	sp, #120	; 0x78
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e162      	b.n	8001962 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800169c:	4b90      	ldr	r3, [pc, #576]	; (80018e0 <HAL_RCC_ClockConfig+0x25c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d910      	bls.n	80016cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016aa:	4b8d      	ldr	r3, [pc, #564]	; (80018e0 <HAL_RCC_ClockConfig+0x25c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 0207 	bic.w	r2, r3, #7
 80016b2:	498b      	ldr	r1, [pc, #556]	; (80018e0 <HAL_RCC_ClockConfig+0x25c>)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	4b89      	ldr	r3, [pc, #548]	; (80018e0 <HAL_RCC_ClockConfig+0x25c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e14a      	b.n	8001962 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d008      	beq.n	80016ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d8:	4b82      	ldr	r3, [pc, #520]	; (80018e4 <HAL_RCC_ClockConfig+0x260>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	497f      	ldr	r1, [pc, #508]	; (80018e4 <HAL_RCC_ClockConfig+0x260>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 80dc 	beq.w	80018b0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d13c      	bne.n	800177a <HAL_RCC_ClockConfig+0xf6>
 8001700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001704:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800170e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b01      	cmp	r3, #1
 8001722:	d102      	bne.n	800172a <HAL_RCC_ClockConfig+0xa6>
 8001724:	4b6f      	ldr	r3, [pc, #444]	; (80018e4 <HAL_RCC_ClockConfig+0x260>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	e00f      	b.n	800174a <HAL_RCC_ClockConfig+0xc6>
 800172a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800172e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001732:	fa93 f3a3 	rbit	r3, r3
 8001736:	667b      	str	r3, [r7, #100]	; 0x64
 8001738:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800173c:	663b      	str	r3, [r7, #96]	; 0x60
 800173e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001740:	fa93 f3a3 	rbit	r3, r3
 8001744:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001746:	4b67      	ldr	r3, [pc, #412]	; (80018e4 <HAL_RCC_ClockConfig+0x260>)
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800174e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001750:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001752:	fa92 f2a2 	rbit	r2, r2
 8001756:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001758:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800175a:	fab2 f282 	clz	r2, r2
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	f042 0220 	orr.w	r2, r2, #32
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	f002 021f 	and.w	r2, r2, #31
 800176a:	2101      	movs	r1, #1
 800176c:	fa01 f202 	lsl.w	r2, r1, r2
 8001770:	4013      	ands	r3, r2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d17b      	bne.n	800186e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0f3      	b.n	8001962 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d13c      	bne.n	80017fc <HAL_RCC_ClockConfig+0x178>
 8001782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001786:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800178a:	fa93 f3a3 	rbit	r3, r3
 800178e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	095b      	lsrs	r3, r3, #5
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d102      	bne.n	80017ac <HAL_RCC_ClockConfig+0x128>
 80017a6:	4b4f      	ldr	r3, [pc, #316]	; (80018e4 <HAL_RCC_ClockConfig+0x260>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	e00f      	b.n	80017cc <HAL_RCC_ClockConfig+0x148>
 80017ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017b4:	fa93 f3a3 	rbit	r3, r3
 80017b8:	647b      	str	r3, [r7, #68]	; 0x44
 80017ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017be:	643b      	str	r3, [r7, #64]	; 0x40
 80017c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017c2:	fa93 f3a3 	rbit	r3, r3
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017c8:	4b46      	ldr	r3, [pc, #280]	; (80018e4 <HAL_RCC_ClockConfig+0x260>)
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80017d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017d4:	fa92 f2a2 	rbit	r2, r2
 80017d8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80017da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017dc:	fab2 f282 	clz	r2, r2
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	f042 0220 	orr.w	r2, r2, #32
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	f002 021f 	and.w	r2, r2, #31
 80017ec:	2101      	movs	r1, #1
 80017ee:	fa01 f202 	lsl.w	r2, r1, r2
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d13a      	bne.n	800186e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0b2      	b.n	8001962 <HAL_RCC_ClockConfig+0x2de>
 80017fc:	2302      	movs	r3, #2
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001802:	fa93 f3a3 	rbit	r3, r3
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180a:	fab3 f383 	clz	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	095b      	lsrs	r3, r3, #5
 8001812:	b2db      	uxtb	r3, r3
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d102      	bne.n	8001824 <HAL_RCC_ClockConfig+0x1a0>
 800181e:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <HAL_RCC_ClockConfig+0x260>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	e00d      	b.n	8001840 <HAL_RCC_ClockConfig+0x1bc>
 8001824:	2302      	movs	r3, #2
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
 8001830:	2302      	movs	r3, #2
 8001832:	623b      	str	r3, [r7, #32]
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <HAL_RCC_ClockConfig+0x260>)
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	2202      	movs	r2, #2
 8001842:	61ba      	str	r2, [r7, #24]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	fa92 f2a2 	rbit	r2, r2
 800184a:	617a      	str	r2, [r7, #20]
  return result;
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	fab2 f282 	clz	r2, r2
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	f042 0220 	orr.w	r2, r2, #32
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	f002 021f 	and.w	r2, r2, #31
 800185e:	2101      	movs	r1, #1
 8001860:	fa01 f202 	lsl.w	r2, r1, r2
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e079      	b.n	8001962 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186e:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <HAL_RCC_ClockConfig+0x260>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f023 0203 	bic.w	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	491a      	ldr	r1, [pc, #104]	; (80018e4 <HAL_RCC_ClockConfig+0x260>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001880:	f7fe fdd0 	bl	8000424 <HAL_GetTick>
 8001884:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	e00a      	b.n	800189e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001888:	f7fe fdcc 	bl	8000424 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	; 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e061      	b.n	8001962 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <HAL_RCC_ClockConfig+0x260>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 020c 	and.w	r2, r3, #12
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1eb      	bne.n	8001888 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_ClockConfig+0x25c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d214      	bcs.n	80018e8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_RCC_ClockConfig+0x25c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 0207 	bic.w	r2, r3, #7
 80018c6:	4906      	ldr	r1, [pc, #24]	; (80018e0 <HAL_RCC_ClockConfig+0x25c>)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <HAL_RCC_ClockConfig+0x25c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e040      	b.n	8001962 <HAL_RCC_ClockConfig+0x2de>
 80018e0:	40022000 	.word	0x40022000
 80018e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d008      	beq.n	8001906 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <HAL_RCC_ClockConfig+0x2e8>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	491a      	ldr	r1, [pc, #104]	; (800196c <HAL_RCC_ClockConfig+0x2e8>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d009      	beq.n	8001926 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_RCC_ClockConfig+0x2e8>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4912      	ldr	r1, [pc, #72]	; (800196c <HAL_RCC_ClockConfig+0x2e8>)
 8001922:	4313      	orrs	r3, r2
 8001924:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001926:	f000 f829 	bl	800197c <HAL_RCC_GetSysClockFreq>
 800192a:	4601      	mov	r1, r0
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_RCC_ClockConfig+0x2e8>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001934:	22f0      	movs	r2, #240	; 0xf0
 8001936:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	fa92 f2a2 	rbit	r2, r2
 800193e:	60fa      	str	r2, [r7, #12]
  return result;
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	fab2 f282 	clz	r2, r2
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	40d3      	lsrs	r3, r2
 800194a:	4a09      	ldr	r2, [pc, #36]	; (8001970 <HAL_RCC_ClockConfig+0x2ec>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	fa21 f303 	lsr.w	r3, r1, r3
 8001952:	4a08      	ldr	r2, [pc, #32]	; (8001974 <HAL_RCC_ClockConfig+0x2f0>)
 8001954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_RCC_ClockConfig+0x2f4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fd1e 	bl	800039c <HAL_InitTick>
  
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3778      	adds	r7, #120	; 0x78
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000
 8001970:	08001f98 	.word	0x08001f98
 8001974:	20000000 	.word	0x20000000
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b08b      	sub	sp, #44	; 0x2c
 8001980:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001996:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d002      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x30>
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x36>
 80019aa:	e03c      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019ac:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019ae:	623b      	str	r3, [r7, #32]
      break;
 80019b0:	e03c      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80019b8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80019bc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	fa92 f2a2 	rbit	r2, r2
 80019c4:	607a      	str	r2, [r7, #4]
  return result;
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	fab2 f282 	clz	r2, r2
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	40d3      	lsrs	r3, r2
 80019d0:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019d2:	5cd3      	ldrb	r3, [r2, r3]
 80019d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019d6:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	220f      	movs	r2, #15
 80019e0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	fa92 f2a2 	rbit	r2, r2
 80019e8:	60fa      	str	r2, [r7, #12]
  return result;
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	fab2 f282 	clz	r2, r2
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	40d3      	lsrs	r3, r2
 80019f4:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xcc>)
 80019f6:	5cd3      	ldrb	r3, [r2, r3]
 80019f8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d008      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a04:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
 8001a14:	e004      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	4a0c      	ldr	r2, [pc, #48]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a1a:	fb02 f303 	mul.w	r3, r2, r3
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	623b      	str	r3, [r7, #32]
      break;
 8001a24:	e002      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a28:	623b      	str	r3, [r7, #32]
      break;
 8001a2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	372c      	adds	r7, #44	; 0x2c
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	007a1200 	.word	0x007a1200
 8001a44:	08001fa8 	.word	0x08001fa8
 8001a48:	08001fb8 	.word	0x08001fb8
 8001a4c:	003d0900 	.word	0x003d0900

08001a50 <app_run>:
/******************************************************************************
    Public function definitions
******************************************************************************/

void app_run(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
    //Init HAL
    hal_init();
 8001a54:	f000 fa58 	bl	8001f08 <hal_init>

	//Init OS
	os_init();
 8001a58:	f000 fa3c 	bl	8001ed4 <os_init>

	//Init tasks
	task_0_init();
 8001a5c:	f000 f820 	bl	8001aa0 <task_0_init>
	task_1_init();
 8001a60:	f000 f830 	bl	8001ac4 <task_1_init>
	task_diag_init();
 8001a64:	f000 f840 	bl	8001ae8 <task_diag_init>

	//Add tasks to scheduler
	os_add_task(task_0_run, 0, 1000);
 8001a68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4809      	ldr	r0, [pc, #36]	; (8001a94 <app_run+0x44>)
 8001a70:	f000 fa37 	bl	8001ee2 <os_add_task>
	os_add_task(task_1_run, 0, 1000);
 8001a74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4807      	ldr	r0, [pc, #28]	; (8001a98 <app_run+0x48>)
 8001a7c:	f000 fa31 	bl	8001ee2 <os_add_task>
	os_add_task(task_diag_run, 0, 1000);
 8001a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a84:	2100      	movs	r1, #0
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <app_run+0x4c>)
 8001a88:	f000 fa2b 	bl	8001ee2 <os_add_task>

	while(true)
	{
		//Call OS dispatcher
		os_dispatcher();
 8001a8c:	f000 fa35 	bl	8001efa <os_dispatcher>
 8001a90:	e7fc      	b.n	8001a8c <app_run+0x3c>
 8001a92:	bf00      	nop
 8001a94:	08001aaf 	.word	0x08001aaf
 8001a98:	08001ad3 	.word	0x08001ad3
 8001a9c:	08001af5 	.word	0x08001af5

08001aa0 <task_0_init>:
/******************************************************************************
    Public function definitions
******************************************************************************/

void task_0_init(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
	//Make some initializations.
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <task_0_run>:

void * task_0_run(void *params)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
	//Implementation of the task.

	return (void*)0;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <task_1_init>:
/******************************************************************************
    Public function definitions
******************************************************************************/

void task_1_init(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
	//Make some initializations.
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <task_1_run>:

void * task_1_run(void *params)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
	//Implementation of the task.

	return (void*)0;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <task_diag_init>:
/******************************************************************************
    Public function definitions
******************************************************************************/

void task_diag_init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	diag_init();
 8001aec:	f000 f8c7 	bl	8001c7e <diag_init>
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <task_diag_run>:

void * task_diag_run(void *params)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	diag_ret_t ret = DIAG_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	75fb      	strb	r3, [r7, #23]
	uint16_t signal_id = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	827b      	strh	r3, [r7, #18]

	uint16_t index = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	82bb      	strh	r3, [r7, #20]
	uint16_t status = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	823b      	strh	r3, [r7, #16]
	int32_t value = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]

	ret = diag_get_next_signal(&signal_id);
 8001b10:	f107 0312 	add.w	r3, r7, #18
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 f8d3 	bl	8001cc0 <diag_get_next_signal>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	75fb      	strb	r3, [r7, #23]

    if (DIAG_OK == ret)
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d135      	bne.n	8001b90 <task_diag_run+0x9c>
    {
        index = map_signal_id_to_index(signal_id);
 8001b24:	8a7b      	ldrh	r3, [r7, #18]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f83a 	bl	8001ba0 <map_signal_id_to_index>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	82bb      	strh	r3, [r7, #20]

        if (true == is_valid_signal_index(index))
 8001b30:	8abb      	ldrh	r3, [r7, #20]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f85a 	bl	8001bec <is_valid_signal_index>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d028      	beq.n	8001b90 <task_diag_run+0x9c>
        {
            if (true == can_signal_st[index].source)    //Only locally generated signals can be sent
 8001b3e:	8aba      	ldrh	r2, [r7, #20]
 8001b40:	4916      	ldr	r1, [pc, #88]	; (8001b9c <task_diag_run+0xa8>)
 8001b42:	4613      	mov	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3324      	adds	r3, #36	; 0x24
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01d      	beq.n	8001b90 <task_diag_run+0x9c>
            {
                dictionary_write(SIG_DiagOverrideSignalId, can_signal_st[index].SIG_ID, &status);
 8001b54:	8aba      	ldrh	r2, [r7, #20]
 8001b56:	4911      	ldr	r1, [pc, #68]	; (8001b9c <task_diag_run+0xa8>)
 8001b58:	4613      	mov	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	2051      	movs	r0, #81	; 0x51
 8001b6e:	f000 f96f 	bl	8001e50 <dictionary_write>
                dictionary_read(index, &value, &status);
 8001b72:	f107 0210 	add.w	r2, r7, #16
 8001b76:	f107 010c 	add.w	r1, r7, #12
 8001b7a:	8abb      	ldrh	r3, [r7, #20]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 f917 	bl	8001db0 <dictionary_read>
                dictionary_write(SIG_DiagOverrideValue, value, &status);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f107 0210 	add.w	r2, r7, #16
 8001b88:	4619      	mov	r1, r3
 8001b8a:	2052      	movs	r0, #82	; 0x52
 8001b8c:	f000 f960 	bl	8001e50 <dictionary_write>
            }
        }

    }

	return (void*)0;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	08001fc8 	.word	0x08001fc8

08001ba0 <map_signal_id_to_index>:
    return can_message_st[index].PGN_ID;
}


uint16_t map_signal_id_to_index(uint16_t signal_id)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80fb      	strh	r3, [r7, #6]
    uint16_t i = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	81fb      	strh	r3, [r7, #14]

    for (i = 0; i < MAX_CAN_MESSAGES; i++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	81fb      	strh	r3, [r7, #14]
 8001bb2:	e00d      	b.n	8001bd0 <map_signal_id_to_index+0x30>
    {
        if (can_signal_st[i].SIG_ID == signal_id)
 8001bb4:	89fa      	ldrh	r2, [r7, #14]
 8001bb6:	490c      	ldr	r1, [pc, #48]	; (8001be8 <map_signal_id_to_index+0x48>)
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	88fa      	ldrh	r2, [r7, #6]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d006      	beq.n	8001bd8 <map_signal_id_to_index+0x38>
    for (i = 0; i < MAX_CAN_MESSAGES; i++)
 8001bca:	89fb      	ldrh	r3, [r7, #14]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	81fb      	strh	r3, [r7, #14]
 8001bd0:	89fb      	ldrh	r3, [r7, #14]
 8001bd2:	2b26      	cmp	r3, #38	; 0x26
 8001bd4:	d9ee      	bls.n	8001bb4 <map_signal_id_to_index+0x14>
 8001bd6:	e000      	b.n	8001bda <map_signal_id_to_index+0x3a>
        {
            break;
 8001bd8:	bf00      	nop
        }
    }

    return i;
 8001bda:	89fb      	ldrh	r3, [r7, #14]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	08001fc8 	.word	0x08001fc8

08001bec <is_valid_signal_index>:
    return can_signal_st[index].SIG_ID;
}


bool is_valid_signal_index(uint16_t index)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	80fb      	strh	r3, [r7, #6]
    bool ret_val = false;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]

    if (index < MAX_CAN_SIGNALS)
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	2bf6      	cmp	r3, #246	; 0xf6
 8001bfe:	d801      	bhi.n	8001c04 <is_valid_signal_index+0x18>
    {
        ret_val = true;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
    }

    return ret_val;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <delay_get_status>:

    return ret_val;
}

delay_ret_t delay_get_status(delay_t *delay)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
    delay_ret_t ret_val = DELAY_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
    uint32_t delta = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]

    if (delay != NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d010      	beq.n	8001c4a <delay_get_status+0x38>
    {
        delta = hal_get_ticks() - delay->start;
 8001c28:	f000 f975 	bl	8001f16 <hal_get_ticks>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	60bb      	str	r3, [r7, #8]

        if (delta > delay->duration)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d902      	bls.n	8001c46 <delay_get_status+0x34>
        {
            ret_val = DELAY_EXPIRED;
 8001c40:	2302      	movs	r3, #2
 8001c42:	73fb      	strb	r3, [r7, #15]
 8001c44:	e001      	b.n	8001c4a <delay_get_status+0x38>
        }
        else
        {
            ret_val = DELAY_RUNNING;
 8001c46:	2303      	movs	r3, #3
 8001c48:	73fb      	strb	r3, [r7, #15]
        }
    }

    return ret_val;
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <delay_reset>:

delay_ret_t delay_reset(delay_t *delay)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
    delay_ret_t ret_val = DELAY_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]

    if (delay != NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d006      	beq.n	8001c74 <delay_reset+0x20>
    {
        delay->start = hal_get_ticks();
 8001c66:	f000 f956 	bl	8001f16 <hal_get_ticks>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	601a      	str	r2, [r3, #0]

        ret_val = DELAY_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	73fb      	strb	r3, [r7, #15]
    }

    return ret_val;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <diag_init>:
/******************************************************************************
    Public function definitions
******************************************************************************/

diag_ret_t diag_init(void)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	af00      	add	r7, sp, #0
    diag_clear();
 8001c82:	f000 f803 	bl	8001c8c <diag_clear>

    return DIAG_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <diag_clear>:
{
    return diag_signals_count;
}

diag_ret_t diag_clear(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
    for (uint16_t i = 0; i < MAX_DIAG_SIGS; i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	80fb      	strh	r3, [r7, #6]
 8001c96:	e007      	b.n	8001ca8 <diag_clear+0x1c>
    {
        diag_signals[i] = DIAG_EMPTY_SLOT;
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <diag_clear+0x30>)
 8001c9c:	21f7      	movs	r1, #247	; 0xf7
 8001c9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint16_t i = 0; i < MAX_DIAG_SIGS; i++)
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	80fb      	strh	r3, [r7, #6]
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	2b27      	cmp	r3, #39	; 0x27
 8001cac:	d9f4      	bls.n	8001c98 <diag_clear+0xc>
    }

    return DIAG_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	2000002c 	.word	0x2000002c

08001cc0 <diag_get_next_signal>:

diag_ret_t diag_get_next_signal(uint16_t *signal_id)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    diag_ret_t ret_val = DIAG_EMPTY;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	73fb      	strb	r3, [r7, #15]

    static uint16_t i = 0;

    if (diag_signals_count > 0)
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <diag_get_next_signal+0x7c>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d02c      	beq.n	8001d2e <diag_get_next_signal+0x6e>
    {
        //Look for the following signal to send
        while (DIAG_EMPTY_SLOT == diag_signals[i])      //WARNING: Possible infinite loop
 8001cd4:	e00c      	b.n	8001cf0 <diag_get_next_signal+0x30>
        {
            i++;
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <diag_get_next_signal+0x80>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <diag_get_next_signal+0x80>)
 8001ce0:	801a      	strh	r2, [r3, #0]
            if (MAX_DIAG_SIGS == i)
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <diag_get_next_signal+0x80>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	2b28      	cmp	r3, #40	; 0x28
 8001ce8:	d102      	bne.n	8001cf0 <diag_get_next_signal+0x30>
            {
                i = 0;
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <diag_get_next_signal+0x80>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	801a      	strh	r2, [r3, #0]
        while (DIAG_EMPTY_SLOT == diag_signals[i])      //WARNING: Possible infinite loop
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <diag_get_next_signal+0x80>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <diag_get_next_signal+0x84>)
 8001cf8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001cfc:	2bf7      	cmp	r3, #247	; 0xf7
 8001cfe:	d0ea      	beq.n	8001cd6 <diag_get_next_signal+0x16>
            }
        }

        *signal_id = diag_signals[i];
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <diag_get_next_signal+0x80>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <diag_get_next_signal+0x84>)
 8001d08:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	801a      	strh	r2, [r3, #0]

        i++;
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <diag_get_next_signal+0x80>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <diag_get_next_signal+0x80>)
 8001d1a:	801a      	strh	r2, [r3, #0]
        if (MAX_DIAG_SIGS == i)
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <diag_get_next_signal+0x80>)
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	2b28      	cmp	r3, #40	; 0x28
 8001d22:	d102      	bne.n	8001d2a <diag_get_next_signal+0x6a>
        {
            i = 0;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <diag_get_next_signal+0x80>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	801a      	strh	r2, [r3, #0]
        }

        ret_val = DIAG_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
    }

    return ret_val;
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	2000007c 	.word	0x2000007c
 8001d40:	2000007e 	.word	0x2000007e
 8001d44:	2000002c 	.word	0x2000002c

08001d48 <is_valid_signal>:

/******************************************************************************
    Local function definitions
******************************************************************************/
static bool is_valid_signal(uint16_t index)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	80fb      	strh	r3, [r7, #6]
    bool ret_val = false;
 8001d52:	2300      	movs	r3, #0
 8001d54:	73fb      	strb	r3, [r7, #15]

    if ((DELAY_RUNNING == delay_get_status(&dictionary[index].expiration)
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <is_valid_signal+0x60>)
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3304      	adds	r3, #4
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff56 	bl	8001c12 <delay_get_status>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d015      	beq.n	8001d98 <is_valid_signal+0x50>
            || (0 == can_signal_st[index].duration))
 8001d6c:	88fa      	ldrh	r2, [r7, #6]
 8001d6e:	490f      	ldr	r1, [pc, #60]	; (8001dac <is_valid_signal+0x64>)
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	440b      	add	r3, r1
 8001d7a:	3320      	adds	r3, #32
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <is_valid_signal+0x50>
            || (true == can_signal_st[index].source))
 8001d82:	88fa      	ldrh	r2, [r7, #6]
 8001d84:	4909      	ldr	r1, [pc, #36]	; (8001dac <is_valid_signal+0x64>)
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	1a9b      	subs	r3, r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	440b      	add	r3, r1
 8001d90:	3324      	adds	r3, #36	; 0x24
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <is_valid_signal+0x54>
    {
        ret_val = true;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
    }

    return ret_val;
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000080 	.word	0x20000080
 8001dac:	08001fc8 	.word	0x08001fc8

08001db0 <dictionary_read>:

    return DICTIONARY_OK;
}

dictionary_ret_t dictionary_read(uint16_t index, int32_t *value, uint16_t *status)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	81fb      	strh	r3, [r7, #14]
    return dictionary_read_int(index, value, status);
 8001dbe:	89fb      	ldrh	r3, [r7, #14]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 f805 	bl	8001dd4 <dictionary_read_int>
 8001dca:	4603      	mov	r3, r0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <dictionary_read_int>:

dictionary_ret_t dictionary_read_int(uint16_t index, int32_t *value, uint16_t *status)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	81fb      	strh	r3, [r7, #14]
    dictionary_ret_t ret_val = DICTIONARY_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	75fb      	strb	r3, [r7, #23]

    if (true == is_valid_signal_index(index))
 8001de6:	89fb      	ldrh	r3, [r7, #14]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff feff 	bl	8001bec <is_valid_signal_index>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d023      	beq.n	8001e3c <dictionary_read_int+0x68>
    {
        if (true == is_valid_signal(index))         //TODO: Check this approach
 8001df4:	89fb      	ldrh	r3, [r7, #14]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ffa6 	bl	8001d48 <is_valid_signal>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d007      	beq.n	8001e12 <dictionary_read_int+0x3e>
        {
            *value = dictionary[index].value;
 8001e02:	89fb      	ldrh	r3, [r7, #14]
 8001e04:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <dictionary_read_int+0x74>)
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	4413      	add	r3, r2
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	e00a      	b.n	8001e28 <dictionary_read_int+0x54>
        }
        else
        {
            *value = can_signal_st[index].default_value;
 8001e12:	89fa      	ldrh	r2, [r7, #14]
 8001e14:	490d      	ldr	r1, [pc, #52]	; (8001e4c <dictionary_read_int+0x78>)
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	1a9b      	subs	r3, r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	440b      	add	r3, r1
 8001e20:	3318      	adds	r3, #24
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	601a      	str	r2, [r3, #0]
        }

        *status = dictionary[index].status;
 8001e28:	89fb      	ldrh	r3, [r7, #14]
 8001e2a:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <dictionary_read_int+0x74>)
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	4413      	add	r3, r2
 8001e30:	330c      	adds	r3, #12
 8001e32:	881a      	ldrh	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	801a      	strh	r2, [r3, #0]
        ret_val = DICTIONARY_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	75fb      	strb	r3, [r7, #23]
    }

    return ret_val;
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000080 	.word	0x20000080
 8001e4c:	08001fc8 	.word	0x08001fc8

08001e50 <dictionary_write>:

    return ret_val;
}

dictionary_ret_t dictionary_write(uint16_t index, int32_t value, uint16_t *status)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	81fb      	strh	r3, [r7, #14]
    return dictionary_write_int(index, value, status);
 8001e5e:	89fb      	ldrh	r3, [r7, #14]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 f805 	bl	8001e74 <dictionary_write_int>
 8001e6a:	4603      	mov	r3, r0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <dictionary_write_int>:

dictionary_ret_t dictionary_write_int(uint16_t index, int32_t value, uint16_t *status)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	81fb      	strh	r3, [r7, #14]
    dictionary_ret_t ret_val = DICTIONARY_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	75fb      	strb	r3, [r7, #23]

    if (true == is_valid_signal_index(index))
 8001e86:	89fb      	ldrh	r3, [r7, #14]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff feaf 	bl	8001bec <is_valid_signal_index>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d017      	beq.n	8001ec4 <dictionary_write_int+0x50>
    {
        dictionary[index].value = value;
 8001e94:	89fb      	ldrh	r3, [r7, #14]
 8001e96:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <dictionary_write_int+0x5c>)
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	4413      	add	r3, r2
 8001e9c:	68ba      	ldr	r2, [r7, #8]
 8001e9e:	601a      	str	r2, [r3, #0]
        delay_reset(&dictionary[index].expiration);
 8001ea0:	89fb      	ldrh	r3, [r7, #14]
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <dictionary_write_int+0x5c>)
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fed2 	bl	8001c54 <delay_reset>
        *status = dictionary[index].status;
 8001eb0:	89fb      	ldrh	r3, [r7, #14]
 8001eb2:	4a07      	ldr	r2, [pc, #28]	; (8001ed0 <dictionary_write_int+0x5c>)
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	4413      	add	r3, r2
 8001eb8:	330c      	adds	r3, #12
 8001eba:	881a      	ldrh	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	801a      	strh	r2, [r3, #0]
        ret_val = DICTIONARY_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	75fb      	strb	r3, [r7, #23]
    }

    return ret_val;
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000080 	.word	0x20000080

08001ed4 <os_init>:
/******************************************************************************
    Public function definitions
******************************************************************************/

void os_init(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
    return;
 8001ed8:	bf00      	nop
}
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <os_add_task>:

void os_add_task(func_ptr_t func_ptr, uint32_t delay, uint32_t period)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
    return;
 8001eee:	bf00      	nop
}
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <os_dispatcher>:

void os_dispatcher(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
    return;
 8001efe:	bf00      	nop
}
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <hal_init>:
/******************************************************************************
    Public function definitions
******************************************************************************/

void hal_init(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0

}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <hal_get_ticks>:

uint32_t hal_get_ticks(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
    return 0;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <__libc_init_array>:
 8001f28:	b570      	push	{r4, r5, r6, lr}
 8001f2a:	4d0d      	ldr	r5, [pc, #52]	; (8001f60 <__libc_init_array+0x38>)
 8001f2c:	4c0d      	ldr	r4, [pc, #52]	; (8001f64 <__libc_init_array+0x3c>)
 8001f2e:	1b64      	subs	r4, r4, r5
 8001f30:	10a4      	asrs	r4, r4, #2
 8001f32:	2600      	movs	r6, #0
 8001f34:	42a6      	cmp	r6, r4
 8001f36:	d109      	bne.n	8001f4c <__libc_init_array+0x24>
 8001f38:	4d0b      	ldr	r5, [pc, #44]	; (8001f68 <__libc_init_array+0x40>)
 8001f3a:	4c0c      	ldr	r4, [pc, #48]	; (8001f6c <__libc_init_array+0x44>)
 8001f3c:	f000 f820 	bl	8001f80 <_init>
 8001f40:	1b64      	subs	r4, r4, r5
 8001f42:	10a4      	asrs	r4, r4, #2
 8001f44:	2600      	movs	r6, #0
 8001f46:	42a6      	cmp	r6, r4
 8001f48:	d105      	bne.n	8001f56 <__libc_init_array+0x2e>
 8001f4a:	bd70      	pop	{r4, r5, r6, pc}
 8001f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f50:	4798      	blx	r3
 8001f52:	3601      	adds	r6, #1
 8001f54:	e7ee      	b.n	8001f34 <__libc_init_array+0xc>
 8001f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f5a:	4798      	blx	r3
 8001f5c:	3601      	adds	r6, #1
 8001f5e:	e7f2      	b.n	8001f46 <__libc_init_array+0x1e>
 8001f60:	080055d0 	.word	0x080055d0
 8001f64:	080055d0 	.word	0x080055d0
 8001f68:	080055d0 	.word	0x080055d0
 8001f6c:	080055d4 	.word	0x080055d4

08001f70 <memset>:
 8001f70:	4402      	add	r2, r0
 8001f72:	4603      	mov	r3, r0
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d100      	bne.n	8001f7a <memset+0xa>
 8001f78:	4770      	bx	lr
 8001f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f7e:	e7f9      	b.n	8001f74 <memset+0x4>

08001f80 <_init>:
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f82:	bf00      	nop
 8001f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f86:	bc08      	pop	{r3}
 8001f88:	469e      	mov	lr, r3
 8001f8a:	4770      	bx	lr

08001f8c <_fini>:
 8001f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8e:	bf00      	nop
 8001f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f92:	bc08      	pop	{r3}
 8001f94:	469e      	mov	lr, r3
 8001f96:	4770      	bx	lr
