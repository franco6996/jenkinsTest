/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_DELAY_H
#define _MOCK_DELAY_H

#include "unity.h"
#include "delay.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_delay_Init(void);
void mock_delay_Destroy(void);
void mock_delay_Verify(void);




#define delay_init_IgnoreAndReturn(cmock_retval) delay_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void delay_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, delay_ret_t cmock_to_return);
#define delay_init_StopIgnore() delay_init_CMockStopIgnore()
void delay_init_CMockStopIgnore(void);
#define delay_init_ExpectAnyArgsAndReturn(cmock_retval) delay_init_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void delay_init_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, delay_ret_t cmock_to_return);
#define delay_init_ExpectAndReturn(delay, duration, cmock_retval) delay_init_CMockExpectAndReturn(__LINE__, delay, duration, cmock_retval)
void delay_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, delay_t* delay, uint32_t duration, delay_ret_t cmock_to_return);
typedef delay_ret_t (* CMOCK_delay_init_CALLBACK)(delay_t* delay, uint32_t duration, int cmock_num_calls);
void delay_init_AddCallback(CMOCK_delay_init_CALLBACK Callback);
void delay_init_Stub(CMOCK_delay_init_CALLBACK Callback);
#define delay_init_StubWithCallback delay_init_Stub
#define delay_get_status_IgnoreAndReturn(cmock_retval) delay_get_status_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void delay_get_status_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, delay_ret_t cmock_to_return);
#define delay_get_status_StopIgnore() delay_get_status_CMockStopIgnore()
void delay_get_status_CMockStopIgnore(void);
#define delay_get_status_ExpectAnyArgsAndReturn(cmock_retval) delay_get_status_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void delay_get_status_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, delay_ret_t cmock_to_return);
#define delay_get_status_ExpectAndReturn(delay, cmock_retval) delay_get_status_CMockExpectAndReturn(__LINE__, delay, cmock_retval)
void delay_get_status_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, delay_t* delay, delay_ret_t cmock_to_return);
typedef delay_ret_t (* CMOCK_delay_get_status_CALLBACK)(delay_t* delay, int cmock_num_calls);
void delay_get_status_AddCallback(CMOCK_delay_get_status_CALLBACK Callback);
void delay_get_status_Stub(CMOCK_delay_get_status_CALLBACK Callback);
#define delay_get_status_StubWithCallback delay_get_status_Stub
#define delay_reset_IgnoreAndReturn(cmock_retval) delay_reset_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void delay_reset_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, delay_ret_t cmock_to_return);
#define delay_reset_StopIgnore() delay_reset_CMockStopIgnore()
void delay_reset_CMockStopIgnore(void);
#define delay_reset_ExpectAnyArgsAndReturn(cmock_retval) delay_reset_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void delay_reset_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, delay_ret_t cmock_to_return);
#define delay_reset_ExpectAndReturn(delay, cmock_retval) delay_reset_CMockExpectAndReturn(__LINE__, delay, cmock_retval)
void delay_reset_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, delay_t* delay, delay_ret_t cmock_to_return);
typedef delay_ret_t (* CMOCK_delay_reset_CALLBACK)(delay_t* delay, int cmock_num_calls);
void delay_reset_AddCallback(CMOCK_delay_reset_CALLBACK Callback);
void delay_reset_Stub(CMOCK_delay_reset_CALLBACK Callback);
#define delay_reset_StubWithCallback delay_reset_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
